package minitwitter;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

public class MiniTwitterGUI extends javax.swing.JFrame {
    
    //JTree
    private DefaultMutableTreeNode root;
    private DefaultTreeModel model;
    private DefaultMutableTreeNode  currentUserTreeNode;
    private DefaultMutableTreeNode currentGroupTreeNode;
    
    //Define Classes
    private final UserGroup rootGroup;
    private UserGroup currentGroup;
    private User currentUser;
    
    private List<String> users;
    private List<String> groups;
    private List<UserViewGUI> usersInterface;
    
    //Interface
    private CompositePattern message;
    
    /**
     * Creates new form MiniTwitterGUI
     */
    public MiniTwitterGUI() {
       
        rootGroup = new UserGroup("Root");
        currentGroup = rootGroup;
        root = new DefaultMutableTreeNode(rootGroup, true);
        currentGroupTreeNode = root;
        model = new DefaultTreeModel(root); 
        
        users = new ArrayList<>();
        usersInterface = new ArrayList<>();
        groups = new ArrayList<>();
       
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        addUserTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        addGroupTextArea = new javax.swing.JTextArea();
        addGroup = new javax.swing.JButton();
        addUser = new javax.swing.JButton();
        openUserView = new javax.swing.JButton();
        showUserTotal = new javax.swing.JButton();
        showMessagesTotal = new javax.swing.JButton();
        showPositivePercentage = new javax.swing.JButton();
        showGroupTotal = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTree1.setModel(model);
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        addUserTextArea.setColumns(20);
        addUserTextArea.setRows(5);
        jScrollPane2.setViewportView(addUserTextArea);

        addGroupTextArea.setColumns(20);
        addGroupTextArea.setRows(5);
        jScrollPane3.setViewportView(addGroupTextArea);

        addGroup.setText("ADD GROUP");
        addGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGroupActionPerformed(evt);
            }
        });

        addUser.setText("ADD USER");
        addUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserActionPerformed(evt);
            }
        });

        openUserView.setText("OPEN USER VIEW");
        openUserView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openUserViewActionPerformed(evt);
            }
        });

        showUserTotal.setText("SHOW USER TOTAL");

        showMessagesTotal.setText("SHOW MESSAGES TOTAL");

        showPositivePercentage.setText("SHOW POSITIVE PERCENTAGE");

        showGroupTotal.setText("SHOW GROUP TOTAL");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(openUserView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(showUserTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showMessagesTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(showGroupTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showPositivePercentage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane3))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addGroup, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addUser, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))
                        .addGap(18, 18, 18)
                        .addComponent(openUserView, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(showUserTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                            .addComponent(showGroupTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(showMessagesTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                            .addComponent(showPositivePercentage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGroupActionPerformed
        
        String inputText = addGroupTextArea.getText();
        
        if(inputText.isEmpty()){
            message = new PopUpMessage();
            message.displayMessage("Group name is empty", JOptionPane.WARNING_MESSAGE);
        }
        else if(!usernameAvailability(inputText)){
            message = new PopUpMessage();
            message.displayMessage("This Group name is not available", JOptionPane.WARNING_MESSAGE);
        }
        else{
            UserGroup addingNewGroup = new UserGroup(inputText);
            groups.add(inputText);
            currentGroup.AddGroup(addingNewGroup);
            currentGroup = addingNewGroup;
            
            DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(addingNewGroup, true);
            currentGroupTreeNode.add(newNode);
            currentGroupTreeNode = newNode;
            model.reload();
            expandJTree();
            addGroupTextArea.setText(null);
        }
    }//GEN-LAST:event_addGroupActionPerformed

    private void openUserViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openUserViewActionPerformed
        if(currentUserTreeNode == null){
            message = new PopUpMessage();
            message.displayMessage("A user has not been selected", JOptionPane.WARNING_MESSAGE);
        }
        else{
            UserViewGUI program = new UserViewGUI();
            program.display();
        }
    }//GEN-LAST:event_openUserViewActionPerformed

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged

        DefaultMutableTreeNode node = (DefaultMutableTreeNode) evt.getPath().getLastPathComponent();
                
         if(node.getUserObject() instanceof User) {
                    currentUser = (User) node.getUserObject();
                    currentUserTreeNode = node;
                    currentGroupTreeNode = (DefaultMutableTreeNode) node.getParent();
                    currentGroup = (UserGroup) currentGroupTreeNode.getUserObject();
                }
         else{
             currentUser = null;
             currentUserTreeNode = null;
             currentGroup = (UserGroup) node.getUserObject();
             currentGroupTreeNode = node;
             
             
         }
        
        System.out.println("CurrentUser: " + currentUser);
        System.out.println("CurrentUserTreeNode: " + currentUserTreeNode);
        System.out.println("CurrentGroup: " + currentGroup);
        System.out.println("CurrentGroupTreeNode: " + currentGroupTreeNode);
        System.out.println("---------------------------------------------------");
    }//GEN-LAST:event_jTree1ValueChanged

    private void addUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserActionPerformed
        
        String inputText = addUserTextArea.getText();
        
        if(inputText.isEmpty()){
            message = new PopUpMessage();
            message.displayMessage("Username is empty", JOptionPane.WARNING_MESSAGE);
        }
        else if(!usernameAvailability(inputText)){
            message = new PopUpMessage();
            message.displayMessage("This Username is not available", JOptionPane.WARNING_MESSAGE);
        }
        else{
            User currentUser = new User(inputText);
            users.add(inputText);
            currentGroup.AddUser(currentUser);
            
            DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(currentUser, true);
            currentGroupTreeNode.add(newNode);
            model.reload();
            expandJTree();
            addUserTextArea.setText(null);
        }
    }//GEN-LAST:event_addUserActionPerformed

    /**
     * @param args the command line arguments
     */
    public void display() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MiniTwitterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MiniTwitterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MiniTwitterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MiniTwitterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MiniTwitterGUI().setVisible(true);
            }
        }); 
    }
    
    public boolean usernameAvailability(String userName){
        
         for(String eachUser : users){
             if(eachUser.equals(userName))
                 return false;
         }
         return true;
    }
    
    public boolean groupNameAvailability(String groupName){
        
         for(String eachGroup : groups){
             if(eachGroup.equals(groupName))
                 return false;
         }
         return true;
    }
    
    public void expandJTree(){
        
        for (int i = 0; i < jTree1.getRowCount(); i++) {
            jTree1.expandRow(i);
        }
    }
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addGroup;
    private javax.swing.JTextArea addGroupTextArea;
    private javax.swing.JButton addUser;
    private javax.swing.JTextArea addUserTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTree jTree1;
    private javax.swing.JButton openUserView;
    private javax.swing.JButton showGroupTotal;
    private javax.swing.JButton showMessagesTotal;
    private javax.swing.JButton showPositivePercentage;
    private javax.swing.JButton showUserTotal;
    // End of variables declaration//GEN-END:variables
}
